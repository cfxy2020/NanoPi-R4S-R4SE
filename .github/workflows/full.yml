#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: NanoPi-R4S-全插件

on:
  repository_dispatch:
  workflow_dispatch:
  #schedule:
    #- cron: 0 17 * * *
  # watch:
  #   types: started

env:
  REPO_URL: https://github.com/DHDAXCW/lede-rockchip
  REPO_BRANCH: stable
  CONFIG_FILE: configs/lean/lean.config
  DIY_SH: scripts/lean.sh
  KMODS_IN_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-20.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

        echo -e "Total CPU cores\t: $(nproc)"
        cat /proc/cpuinfo | grep 'model name'
        free -h
        uname -a
        [ -f /proc/version ] && cat /proc/version
        [ -f /etc/issue.net ] && cat /etc/issue.net
        [ -f /etc/issue ] && cat /etc/issue
        ulimit -a
        
        
    - name: Clone Source Code
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        
    - name: Update Feeds
      id: update
      run: |
        cd openwrt
        echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
        echo "OPENWRTROOT=$PWD" >> $GITHUB_OUTPUT
        mkdir customfeeds
        git clone --depth=1 https://github.com/DHDAXCW/packages customfeeds/packages
        git clone --depth=1 https://github.com/DHDAXCW/luci customfeeds/luci
        chmod +x ../scripts/*.sh
        ../scripts/hook-feeds.sh

    - name: Install Feeds
      run: |
        cd $OPENWRTROOT
        ./scripts/feeds install -a
        
    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRTROOT/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
        chmod +x scripts/*.sh
        cd $OPENWRTROOT
        ../$DIY_SH
        ../scripts/preset-clash-core.sh arm64
        ../scripts/preset-terminal-tools.sh
        make defconfig
        
#     - name: Start SSH via tmate
#       uses: P3TERX/ssh2actions@main      
    
#     - name: Upload .config
#       uses: actions/upload-artifact@main
#       with:
#         name: OpenWrt_config
#         path: openwrt/.config
        

    - name: Download Package
      id: package
      run: |
        cd $OPENWRTROOT
        cat .config
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
  
    - name: Compile Packages
      id: compile
      run: |
        cd $OPENWRTROOT
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(nproc) || make tools/compile -j$(nproc)
        make toolchain/compile -j$(nproc) || make toolchain/compile -j$(nproc)
        make target/compile -j$(nproc) || make target/compile -j$(nproc) IGNORE_ERRORS=1
        make diffconfig
        make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j$(nproc) IGNORE_ERRORS=1
        make package/index

        cd $OPENWRTROOT/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        echo "PLATFORM=$PLATFORM" >> $GITHUB_OUTPUT

        cd $OPENWRTROOT/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        echo "TARGET=$TARGET" >> $GITHUB_OUTPUT

        cd *
        SUBTARGET=$(basename `pwd`)
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_OUTPUT

        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "FIRMWARE=$PWD" >> $GITHUB_OUTPUT

        echo "COMPILE_STATUS=success" >> $GITHUB_OUTPUT
        
    - name: Generate Firmware
      if: steps.compile.outputs.COMPILE_STATUS == 'success'
      id: generate
      run: |
        cd configs/opkg
        sed -i "s/subtarget/$SUBTARGET/g" distfeeds*.conf
        sed -i "s/target\//$TARGET\//g" distfeeds*.conf
        sed -i "s/platform/$PLATFORM/g" distfeeds*.conf

        cd $OPENWRTROOT
        mkdir -p files/etc/uci-defaults/
        cp ../scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
        mkdir -p files/etc/opkg
        cp ../configs/opkg/distfeeds-packages-server.conf files/etc/opkg/distfeeds.conf.server
        mkdir -p files/etc/opkg/keys
        cp ../configs/opkg/1035ac73cc4e59e3 files/etc/opkg/keys/1035ac73cc4e59e3
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            mkdir -p files/www/snapshots
            cp -r bin/targets files/www/snapshots
            cp ../configs/opkg/distfeeds-18.06-local.conf files/etc/opkg/distfeeds.conf
        else
            cp ../configs/opkg/distfeeds-18.06-remote.conf files/etc/opkg/distfeeds.conf
        fi
        cp files/etc/opkg/distfeeds.conf.server files/etc/opkg/distfeeds.conf.mirror
        sed -i "s/http:\/\/192.168.123.100:2345\/snapshots/https:\/\/openwrt.cc\/snapshots\/$(date +"%Y-%m-%d")\/lean/g" files/etc/opkg/distfeeds.conf.mirror
        make package/install -j$(nproc) || make package/install -j1 V=s
        make target/install -j$(nproc) || make target/install -j1 V=s
        pushd bin/targets/rockchip/armv8
        # rm -rf **ext4**
        rm -rf openwrt-rockchip-armv8.manifest
        rm -rf openwrt-rockchip-armv8-rootfs.tar.gz
        rm -rf config.buildinfo
        rm -rf packages-server.zip

        
        # mv openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz full-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz
        rm -rf openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz

        mv openwrt-rockchip-armv8-friendlyarm_nanopi-r4se-ext4-sysupgrade.img.gz full-friendlyarm_nanopi-r4se-ext4-sysupgrade.img.gz
        
        # mv openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz full-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz
        rm -rf openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz

        mv openwrt-rockchip-armv8-friendlyarm_nanopi-r4se-squashfs-sysupgrade.img.gz full-friendlyarm_nanopi-r4se-squashfs-sysupgrade.img.gz
        popd

        make checksum
        mv bin/targets/rockchip/armv8/sha256sums bin/targets/rockchip/armv8/full-sha256sums
        echo "GENERATE_STATUS=success" >> $GITHUB_OUTPUT

    - name: Organize bin files
      id: organize_bin
      run: |
        cd $OPENWRTROOT
        # 强制递归复制.config到bin文件夹中
        cp -r -f ./.config ./bin
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.organize_bin.outputs.status == 'success' && !cancelled() && !failure()
      with:
        name: OpenWrt_bin_${{ env.FILE_DATE }}
        path: $OPENWRTROOT/bin        
